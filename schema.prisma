generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // 或者直接设置 MySQL 连接 URL
}

model App {
  id          Int      @id @default(1) // label:应用ID
  title       String   @default("App") // label:应用名称
  subtitle    String?
  favicon     String
  language    String?
  theme       String?
  watermark   String?
  create_time DateTime @default(now()) // label:创建时间
  update_time DateTime @updatedAt // label:更新时间
}

model Roles {
  id          Int           @id @default(autoincrement()) // label:角色ID
  name        String // label:角色名称
  users       User[]        @relation("userToRoles")
  // menuIds Int[]
  menus       Menu[]        @relation("rolesToMenu")
  permissions Permissions[] @relation("rolesToPermissions")
  create_time DateTime      @default(now()) // label:创建时间
  update_time DateTime      @updatedAt // label:更新时间
}

model Permissions {
  id          Int      @id @default(autoincrement())
  name        String // 权限名称
  path        String // 权限标志
  method      String
  roles       Roles[]  @relation("rolesToPermissions")
  create_time DateTime @default(now()) // label:创建时间
  update_time DateTime @updatedAt // label:更新时间

  @@unique([path, method])
}

model UserAuth {
  // id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) // label:用户
  userId      Int // label:用户ID
  deviceId    String   @default("web") // label:设备ID
  token       String // label:token
  status      Int // label:状态
  create_time DateTime @default(now()) // label:创建时间
  update_time DateTime @updatedAt // label:更新时间
  expire_time DateTime // label:过期时间

  @@unique([userId, deviceId])
  @@unique([token, deviceId])
}

model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique
  password    String
  nickname    String?
  realname    String?
  avatar      String?
  email       String     @unique
  roles       Roles[]    @relation("userToRoles")
  create_time DateTime   @default(now())
  update_time DateTime   @updatedAt
  isadmin     Boolean    @default(false)
  isactive    Boolean    @default(true)
  UserAuth    UserAuth[]
  markdowns   Markdown[] @relation("markdownToUser")
}

model Menu {
  id          Int      @id @default(autoincrement())
  name        String
  type        Int
  path        String
  icon        String?
  sort        Int      @default(0)
  parent      Menu?    @relation("MenuChildren", fields: [parentId], references: [id], onDelete: Restrict)
  parentId    Int?
  children    Menu[]   @relation("MenuChildren")
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  roles       Roles[]  @relation("rolesToMenu")
}

model Tag {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  sort        Int        @default(0)
  markdown    Markdown[]
  create_time DateTime   @default(now())
  update_time DateTime   @updatedAt
}

model Dict {
  id          Int        @id @default(autoincrement())
  type        String     @unique
  sort        Int        @default(0)
  create_time DateTime   @default(now()) // label:创建时间
  update_time DateTime   @updatedAt // label:更新时间
  dictItem    DictItem[]
}

model DictItem {
  id          Int      @id @default(autoincrement())
  label       String
  value       Int
  sort        Int      @default(0)
  create_time DateTime @default(now()) // label:创建时间
  update_time DateTime @updatedAt // label:更新时间
  dictId      Int
  dict        Dict     @relation(fields: [dictId], references: [id], onDelete: Cascade)

  @@unique([value, dictId])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  sort        Int        @default(0)
  create_time DateTime   @default(now())
  update_time DateTime   @updatedAt
  parent      Category?  @relation("CategoryChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    Int?
  children    Category[] @relation("CategoryChildren")
  markdown    Markdown[] @relation("categoryToMarkdown")
}

model Markdown {
  id           Int       @id @default(autoincrement())
  title        String
  userId       Int
  user         User      @relation("markdownToUser", fields: [userId], references: [id])
  desp         String
  category     Category? @relation("categoryToMarkdown", fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId   Int?
  tags         Tag[]
  banner       String
  content      String?   @db.LongText()
  create_time  DateTime  @default(now())
  update_time  DateTime  @updatedAt
  ispublish    Boolean   @default(false)
  publish_time DateTime? @updatedAt
  Comment      Comment[]
}

model Files {
  id          Int      @id @default(autoincrement())
  name        String
  url         String
  type        String
  size        Int
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
}

model Comment {
  id          Int       @id @default(autoincrement())
  nickname    String
  email       String
  site        String
  parentId    Int?
  parent      Comment?  @relation("CommentParent", fields: [parentId], references: [id], onDelete: Cascade)
  children    Comment[] @relation("CommentParent")
  reply       Comment?  @relation("CommentReply", fields: [replyId], references: [id])
  replyId     Int?
  replys      Comment[] @relation("CommentReply")
  content     String
  markdown    Markdown  @relation(fields: [markdownId], references: [id])
  markdownId  Int
  create_time DateTime  @default(now())
  update_time DateTime  @updatedAt
}
